#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 25, 2024 05:08:48 PM IST  platform: Linux
import os
import sys
import tkinter as tk
import tkinter.ttk as ttk
from io import StringIO
from time import time
from tkinter import filedialog

from bank_statement_utility.Constants import BANK_NAMES, ACCOUNT_TYPE
from bank_statement_utility.StatementProcessor import StatementProcessor
from bank_statement_utility.logger import log, output_filename_path
from bank_statement_utility.ui.ui_utils import show_alert, append_to_text_ln

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black'
_tabfg2 = 'white'
_bgmode = 'light'
_tabbg1 = '#d9d9d9'
_tabbg2 = 'gray40'
_READONLY = "readonly"
_HOME_PATH = os.path.expanduser("~")

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran: return
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font="TkDefaultFont")
    if sys.platform == "win32":
        style.theme_use('winnative')
    _style_code_ran = 1


class MainScreenView:
    def __init__(self, top=None):
        """
        This class configures and populates the toplevel window.
           top is the toplevel containing window.
        """
        log.info("Starting the UI..")
        top.geometry("771x248+338+340")
        top.minsize(700, 250)
        top.maxsize(3505, 1050)
        top.resizable(1, 1)
        top.title("Bank Statement Utility")  # TODO: Derive from config

        # ============= Variables to hold data ======
        self.top = top
        self.combobox_bankname = tk.StringVar()
        self.radioButton_account_type = tk.StringVar()
        self.print_out = StringIO()
        # ============= Variables to hold data ======

        # Intercept and set stdout to our StringIO instance
        sys.stdout = self.print_out

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.menubar.add_command(compound=tk.LEFT
                                 , font="-family {DejaVu Sans} -size 10", label='File')
        self.menubar.add_command(compound=tk.LEFT
                                 , font="-family {DejaVu Sans} -size 10", label='View')
        self.menubar.add_command(compound=tk.LEFT
                                 , font="-family {DejaVu Sans} -size 10", label='Help')

        _style_code()
        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(relx=0.032, rely=0.07, height=21, width=84)
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel1.configure(relief=tk.FLAT)
        self.TLabel1.configure(anchor=tk.W)
        self.TLabel1.configure(justify=tk.LEFT)
        self.TLabel1.configure(text='''Bank Name''')
        self.TLabel1.configure(compound=tk.LEFT)

        self.TRadiobuttonAccountType_1 = ttk.Radiobutton(self.top)
        self.TRadiobuttonAccountType_1.place(relx=0.547, rely=0.07
                                             , relwidth=0.087, relheight=0.0, height=21)
        self.TRadiobuttonAccountType_1.configure(variable=self.radioButton_account_type)
        self.TRadiobuttonAccountType_1.configure(text=ACCOUNT_TYPE[0])
        self.TRadiobuttonAccountType_1.configure(value=ACCOUNT_TYPE[0])
        # self.TRadiobuttonAccountType_1.configure(state="selected") #TODO: Check can it be selected by default
        self.TRadiobuttonAccountType_1.configure(compound=tk.LEFT)

        self.TRadiobuttonAccountType_2 = ttk.Radiobutton(self.top)
        self.TRadiobuttonAccountType_2.place(relx=0.646, rely=0.07, relwidth=0.1
                                             , relheight=0.0, height=21)
        self.TRadiobuttonAccountType_2.configure(variable=self.radioButton_account_type)
        self.TRadiobuttonAccountType_2.configure(text=ACCOUNT_TYPE[1])
        self.TRadiobuttonAccountType_2.configure(value=ACCOUNT_TYPE[1])
        self.TRadiobuttonAccountType_2.configure(compound=tk.LEFT)

        self.TRadiobuttonAccountType_3 = ttk.Radiobutton(self.top)
        self.TRadiobuttonAccountType_3.place(relx=0.756, rely=0.07
                                             , relwidth=0.139, relheight=0.0, height=21)
        self.TRadiobuttonAccountType_3.configure(variable=self.radioButton_account_type)
        self.TRadiobuttonAccountType_3.configure(text=ACCOUNT_TYPE[2])
        self.TRadiobuttonAccountType_3.configure(value=ACCOUNT_TYPE[2])
        self.TRadiobuttonAccountType_3.configure(compound=tk.LEFT)

        self.TLabel2 = ttk.Label(self.top)
        self.TLabel2.place(relx=0.415, rely=0.07, height=21, width=102)
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel2.configure(relief=tk.FLAT)
        self.TLabel2.configure(anchor=tk.W)
        self.TLabel2.configure(justify=tk.LEFT)
        self.TLabel2.configure(text="Account Type")
        self.TLabel2.configure(compound=tk.LEFT)

        self.TLabel3 = ttk.Label(self.top)
        self.TLabel3.place(relx=0.032, rely=0.274, height=20, width=81)
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel3.configure(relief=tk.FLAT)
        self.TLabel3.configure(anchor=tk.W)
        self.TLabel3.configure(justify=tk.LEFT)
        self.TLabel3.configure(text='''Upload File''')
        self.TLabel3.configure(compound=tk.LEFT)

        self.TComboboxBankName = ttk.Combobox(self.top)
        self.TComboboxBankName.place(relx=0.157, rely=0.07, relheight=0.082
                                     , relwidth=0.205)
        self.TComboboxBankName.configure(font="-family {DejaVu Sans} -size 10")
        self.TComboboxBankName.configure(state=_READONLY)
        self.TComboboxBankName.configure(textvariable=self.combobox_bankname)
        self.TComboboxBankName.configure(values=["---- Select Bank ----"] + BANK_NAMES)
        self.TComboboxBankName.current(0)
        self.TComboboxBankName_tooltip = \
            ToolTip(self.TComboboxBankName, '''Select Bank''')

        self.TButtonUpload = ttk.Button(self.top)
        self.TButtonUpload.place(relx=0.59, rely=0.261, height=25, width=103)
        self.TButtonUpload.configure(text='''Upload''')
        self.TButtonUpload.configure(compound=tk.LEFT)
        self.TButtonUpload.configure(command=self.upload_file)

        self.TEntryUploadPath = ttk.Entry(self.top)
        self.TEntryUploadPath.place(relx=0.157, rely=0.261, relheight=0.097
                                    , relwidth=0.433)
        self.TEntryUploadPath.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntryUploadPath.configure(state=_READONLY)
        self.TEntryUploadPath.configure(cursor="xterm")
        self.TEntryUploadPath_tooltip = \
            ToolTip(self.TEntryUploadPath, '''File Path''')

        self.TButtonProcess = ttk.Button(self.top)
        self.TButtonProcess.place(relx=0.765, rely=0.195, height=68, width=173)
        self.TButtonProcess.configure(text='''Process''')
        self.TButtonProcess.configure(compound=tk.LEFT)
        self.TButtonProcess.focus()
        self.TButtonProcess.configure(command=self.process_file)

        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(relx=0.013, rely=0.486, relheight=0.463
                           , relwidth=0.979)
        self.TFrame1.configure(relief=tk.GROOVE)
        self.TFrame1.configure(borderwidth="2")

        self.TLabelResult = ttk.Label(self.TFrame1)
        self.TLabelResult.place(relx=0.015, rely=0.092, height=20, width=157)
        self.TLabelResult.configure(font="-family {DejaVu Sans} -size 11")
        self.TLabelResult.configure(relief=tk.FLAT)
        self.TLabelResult.configure(anchor=tk.W)
        self.TLabelResult.configure(justify=tk.LEFT)
        self.TLabelResult.configure(compound=tk.LEFT)

        self.TTextOutput = tk.Text(self.TFrame1, height=50, width=50)
        self.TTextOutput.place(relx=0.015, rely=0.319, relheight=0.597
                               , relwidth=0.972)
        self.TTextOutput.configure(font="-family {DejaVu Sans} -size 10")
        # self.TEntryOutput.configure(state='readonly')
        self.TTextOutput.configure(cursor="xterm")
        self.TTextOutput.bind("<Key>", lambda e: "break")

        self.TButtonLogs = ttk.Button(self.TFrame1)
        self.TButtonLogs.place(relx=0.875, rely=0.05, height=27, width=83)
        self.TButtonLogs.configure(text='''Logs''')
        self.TButtonLogs.configure(compound=tk.LEFT)
        self.TButtonLogs.configure(command=self.open_log_file)

        log.info("Completed loading the UI")

    def open_log_file(self):
        os.system(output_filename_path)

    def upload_file(self):
        file_type_map = (
            ("Text CSV", "*.csv"), ("Excel 2003-365", "*.xlsx"), ("Excel 97-2003", "*.xls"), ("Pdf file", "*.pdf"),
            ("Text file", "*.txt"), ("All files", "*.*"))

        # Open a file dialog window and allow the user to select a file
        file_path = filedialog.askopenfilename(initialdir=_HOME_PATH, title="Pick File", filetypes=file_type_map)

        self.TEntryUploadPath.configure(state=tk.NORMAL)
        # Delete the existing text in the Entry widget
        self.TEntryUploadPath.delete(0, tk.END)
        # Display the selected file path in a label
        self.TEntryUploadPath.insert(tk.END, file_path)
        self.TEntryUploadPath.configure(state=_READONLY)

        # Update Tooltip
        self.TEntryUploadPath_tooltip = \
            ToolTip(self.TEntryUploadPath, file_path)

    def process_file(self):
        try:
            self.__validate_fields()

            start_time = time()
            statement_processor = StatementProcessor(self.TComboboxBankName, self.radioButton_account_type,
                                                     self.TEntryUploadPath)
            response = statement_processor.process()

            # Clear previous Output
            self.TTextOutput.delete("0.0", tk.END)

            # restore stdout so we can really print and then set again
            sys.stdout = sys.__stdout__
            append_to_text_ln(self.TTextOutput, self.print_out.getvalue())
            self.print_out = sys.stdout

            if response != 0:
                self.TLabelResult.configure(foreground="RED", text="FAILURE")
                append_to_text_ln(self.TTextOutput, "App ended with errors. Check logs for details")
            else:
                self.TLabelResult.configure(foreground="GREEN", text="SUCCESS")
                append_to_text_ln(self.TTextOutput, "App ended successfully.")

            # Print Time taken
            append_to_text_ln(self.TTextOutput, "--- Time Taken: %s seconds ---" % (time() - start_time))
        except ValueError as value_ex:
            show_alert("Validation Error", str(value_ex))
        except IOError as io_ex:
            self.TLabelResult.configure(foreground="RED", text="FAILURE")
            append_to_text_ln(self.TTextOutput, str(io_ex))
        except Exception as err:
            log.error("Unknown error occur. Error:{error}".format(error=err.__str__()),
                      exc_info=True)
            show_alert("Error", "Unknown Error. Check logs for more details.")

    def __validate_fields(self):
        # Bank Name Validation
        if not BANK_NAMES.__contains__(self.combobox_bankname.get()):
            raise ValueError("Bank Name Not Selected")

        # Account Type Validation
        if not ACCOUNT_TYPE.__contains__(self.radioButton_account_type.get()):
            raise ValueError("Account Type Not Selected")

        # File Validation
        if not self.TEntryUploadPath.get():
            raise ValueError("File Not Selected")

        # Check File exists or not
        is_file_exists = os.path.exists(self.TEntryUploadPath.get())
        if not is_file_exists:
            raise ValueError("File not Found or unable to Read it.")
        return True


class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """

    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                              fg=_fgcolor, font="TkDefaultFont",
                              aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        self.msgVar.set(msg)

    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', tk.LEFT)
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg  # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip
