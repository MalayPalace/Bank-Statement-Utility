#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 25, 2024 05:08:48 PM IST  platform: Linux
import os
import sys
import tkinter as tk
from io import StringIO
from time import time
from tkinter import filedialog

import ttkbootstrap as ttk
from ttkbootstrap import DARK

from bank_statement_utility.Constants import BANK_NAMES, ACCOUNT_TYPE
from bank_statement_utility.StatementProcessor import StatementProcessor
from bank_statement_utility.logger import log, output_filename_path
from bank_statement_utility.services.ExportService import ExportService
from bank_statement_utility.ui import menu_support
from bank_statement_utility.ui.tooltip import ToolTip
from bank_statement_utility.ui.ui_utils import show_alert, append_to_text_ln, get_spaced_text

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black'
_tabfg2 = 'white'
_bgmode = 'light'
_tabbg1 = '#d9d9d9'
_tabbg2 = 'gray40'
_READONLY = "readonly"
_HOME_PATH = os.path.expanduser("~")

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran: return
    style = ttk.Style()
    style.configure('.', font="-family {DejaVu Sans} -size 10")
    if sys.platform == "win32":
        style.theme_use('winnative')
    _style_code_ran = 1


class MainScreenView:
    def __init__(self, top=None):
        """
        This class configures and populates the toplevel window.
           top is the toplevel containing window.
        """
        log.info("Starting the UI..")
        top.geometry("771x248+338+340")
        top.minsize(700, 250)
        top.maxsize(3505, 1050)
        top.resizable(1, 1)
        top.title("Bank Statement Utility")  # TODO: Derive from config

        # ============= Variables to hold data ======
        self.top = top
        self.combobox_bankname = tk.StringVar()
        self.radioButton_account_type = tk.StringVar()
        # ============= Variables to hold data ======

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.__configure_menu_bar(top)

        _style_code()
        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(relx=0.032, rely=0.07, height=21, width=84)
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel1.configure(relief=tk.FLAT)
        self.TLabel1.configure(anchor=tk.W)
        self.TLabel1.configure(justify=tk.LEFT)
        self.TLabel1.configure(text='''Bank Name''')
        self.TLabel1.configure(compound=tk.LEFT)

        self.TRadiobuttonAccountType_1 = ttk.Radiobutton(self.top)
        self.TRadiobuttonAccountType_1.place(relx=0.547, rely=0.07
                                             , relwidth=0.087, relheight=0.0, height=21)
        self.TRadiobuttonAccountType_1.configure(variable=self.radioButton_account_type)
        self.TRadiobuttonAccountType_1.configure(text=ACCOUNT_TYPE[0])
        self.TRadiobuttonAccountType_1.configure(value=ACCOUNT_TYPE[0])
        # self.TRadiobuttonAccountType_1.configure(state="selected") #TODO: Check can it be selected by default
        self.TRadiobuttonAccountType_1.configure(compound=tk.LEFT)

        self.TRadiobuttonAccountType_2 = ttk.Radiobutton(self.top)
        self.TRadiobuttonAccountType_2.place(relx=0.646, rely=0.07, relwidth=0.1
                                             , relheight=0.0, height=21)
        self.TRadiobuttonAccountType_2.configure(variable=self.radioButton_account_type)
        self.TRadiobuttonAccountType_2.configure(text=ACCOUNT_TYPE[1])
        self.TRadiobuttonAccountType_2.configure(value=ACCOUNT_TYPE[1])
        self.TRadiobuttonAccountType_2.configure(compound=tk.LEFT)

        self.TRadiobuttonAccountType_3 = ttk.Radiobutton(self.top)
        self.TRadiobuttonAccountType_3.place(relx=0.756, rely=0.07
                                             , relwidth=0.139, relheight=0.0, height=21)
        self.TRadiobuttonAccountType_3.configure(variable=self.radioButton_account_type)
        self.TRadiobuttonAccountType_3.configure(text=ACCOUNT_TYPE[2])
        self.TRadiobuttonAccountType_3.configure(value=ACCOUNT_TYPE[2])
        self.TRadiobuttonAccountType_3.configure(compound=tk.LEFT)

        self.TLabel2 = ttk.Label(self.top)
        self.TLabel2.place(relx=0.415, rely=0.07, height=21, width=102)
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel2.configure(relief=tk.FLAT)
        self.TLabel2.configure(anchor=tk.W)
        self.TLabel2.configure(justify=tk.LEFT)
        self.TLabel2.configure(text="Account Type")
        self.TLabel2.configure(compound=tk.LEFT)

        self.TLabel3 = ttk.Label(self.top)
        self.TLabel3.place(relx=0.032, rely=0.274, height=20, width=81)
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10")
        self.TLabel3.configure(relief=tk.FLAT)
        self.TLabel3.configure(anchor=tk.W)
        self.TLabel3.configure(justify=tk.LEFT)
        self.TLabel3.configure(text='''Upload File''')
        self.TLabel3.configure(compound=tk.LEFT)

        self.TComboboxBankName = ttk.Combobox(self.top)
        self.TComboboxBankName.place(relx=0.157, rely=0.07, relheight=0.122
                                     , relwidth=0.205)
        self.TComboboxBankName.configure(font="-family {DejaVu Sans} -size 10")
        self.TComboboxBankName.configure(state=_READONLY)
        self.TComboboxBankName.configure(textvariable=self.combobox_bankname)
        self.TComboboxBankName.configure(values=["---- Select Bank ----"] + BANK_NAMES)
        self.TComboboxBankName.current(0)
        self.TComboboxBankName_tooltip = \
            ToolTip(self.TComboboxBankName, '''Select Bank''')

        self.TButtonUpload = ttk.Button(self.top, bootstyle=DARK)
        self.TButtonUpload.place(relx=0.59, rely=0.261, height=25, width=103)
        self.TButtonUpload.configure(text='''Upload''')
        self.TButtonUpload.configure(compound=tk.LEFT)
        self.TButtonUpload.configure(command=self.upload_file)

        self.TEntryUploadPath = ttk.Entry(self.top)
        self.TEntryUploadPath.place(relx=0.157, rely=0.261, relheight=0.097
                                    , relwidth=0.433)
        self.TEntryUploadPath.configure(font="-family {DejaVu Sans} -size 10")
        self.TEntryUploadPath.configure(state=_READONLY)
        self.TEntryUploadPath.configure(cursor="xterm")
        self.TEntryUploadPath_tooltip = \
            ToolTip(self.TEntryUploadPath, '''File Path''')

        self.TButtonProcess = ttk.Button(self.top)
        self.TButtonProcess.place(relx=0.765, rely=0.195, height=68, width=173)
        self.TButtonProcess.configure(text='''Process''')
        self.TButtonProcess.configure(compound=tk.LEFT)
        self.TButtonProcess.focus()
        self.TButtonProcess.configure(command=self.process_file)

        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(relx=0.013, rely=0.486, relheight=0.463
                           , relwidth=0.979)
        self.TFrame1.configure(relief=tk.GROOVE)
        self.TFrame1.configure(borderwidth="2")

        self.TLabelResult = ttk.Label(self.TFrame1)
        self.TLabelResult.place(relx=0.015, rely=0.092, height=20, width=157)
        self.TLabelResult.configure(font="-family {DejaVu Sans} -size 11")
        self.TLabelResult.configure(relief=tk.FLAT)
        self.TLabelResult.configure(anchor=tk.W)
        self.TLabelResult.configure(justify=tk.LEFT)
        self.TLabelResult.configure(compound=tk.LEFT)

        self.TTextOutput = tk.Text(self.TFrame1, height=50, width=50)
        self.TTextOutput.place(relx=0.015, rely=0.319, relheight=0.597
                               , relwidth=0.972)
        self.TTextOutput.configure(font="-family {DejaVu Sans} -size 10")
        # self.TEntryOutput.configure(state='readonly')
        self.TTextOutput.configure(cursor="xterm")
        self.TTextOutput.bind("<Key>", lambda e: "break")

        self.TButtonLogs = ttk.Button(self.TFrame1, bootstyle=DARK)
        self.TButtonLogs.place(relx=0.875, rely=0.05, height=27, width=83)
        self.TButtonLogs.configure(text='''Logs''')
        self.TButtonLogs.configure(compound=tk.LEFT)
        self.TButtonLogs.configure(command=self.open_log_file)

        log.info("Completed loading the UI")

    def __configure_menu_bar(self, top):
        # Create Export Sub-Menu
        sub_export = tk.Menu(top, font="-family {DejaVu Sans} -size 10", tearoff=0)
        sub_export.add_command(command=self.export_as_csv, label=get_spaced_text("as CSV"))

        # Create File Menu
        file = tk.Menu(top, font="-family {DejaVu Sans} -size 10", tearoff=0)
        file.add_cascade(menu=sub_export, label=get_spaced_text("Export"))
        file.add_separator()
        file.add_command(command=menu_support.quit_app, label=get_spaced_text("Quit"))

        # Create Help Menu
        help_menu = tk.Menu(top, font="-family {DejaVu Sans} -size 10", tearoff=0)
        help_menu.add_command(command=lambda: menu_support.about(self.top), label=get_spaced_text("About"))

        self.menubar.add_cascade(menu=file,
                                 label="File")
        self.menubar.add_cascade(menu=help_menu,
                                 label="Help")

    def open_log_file(self):
        os.system(output_filename_path)

    def upload_file(self):
        file_type_map = (
            ("Text CSV", "*.csv"), ("Excel 2003-365", "*.xlsx"), ("Excel 97-2003", "*.xls"), ("Pdf file", "*.pdf"),
            ("Text file", "*.txt"), ("All files", "*.*"))

        # Open a file dialog window and allow the user to select a file
        file_path = filedialog.askopenfilename(initialdir=_HOME_PATH, title="Pick File", filetypes=file_type_map)

        self.TEntryUploadPath.configure(state=tk.NORMAL)
        # Delete the existing text in the Entry widget
        self.TEntryUploadPath.delete(0, tk.END)
        # Display the selected file path in a label
        self.TEntryUploadPath.insert(tk.END, file_path)
        self.TEntryUploadPath.configure(state=_READONLY)

        # Update Tooltip
        self.TEntryUploadPath_tooltip = \
            ToolTip(self.TEntryUploadPath, file_path)

    def process_file(self):
        try:
            # Clear previous Output
            self.__clear_field()

            self.__validate_fields()

            # Intercept and set stdout to our StringIO instance
            print_out = StringIO()
            sys.stdout = print_out

            start_time = time()
            statement_processor = StatementProcessor(self.TComboboxBankName.get(), self.radioButton_account_type.get(),
                                                     self.TEntryUploadPath.get())
            response = statement_processor.process()

            # restore stdout so we can really print and then set again
            sys.stdout = sys.__stdout__
            append_to_text_ln(self.TTextOutput, print_out.getvalue())

            if response != 0:
                self.TLabelResult.configure(foreground="RED", text="FAILURE")
                append_to_text_ln(self.TTextOutput, "App ended with errors. Check logs for details")
            else:
                self.TLabelResult.configure(foreground="GREEN", text="SUCCESS")
                append_to_text_ln(self.TTextOutput, "App ended successfully.")

            # Print Time taken
            append_to_text_ln(self.TTextOutput, "--- Time Taken: %s seconds ---" % (time() - start_time))
        except ValueError as value_ex:
            show_alert("Validation Error", str(value_ex))
        except IOError as io_ex:
            self.TLabelResult.configure(foreground="RED", text="FAILURE")
            append_to_text_ln(self.TTextOutput, str(io_ex))
        except Exception as err:
            log.error("Unknown error occur. Error:{error}".format(error=err.__str__()),
                      exc_info=True)
            show_alert("Error", "Unknown Error. Check logs for more details.")

    def export_as_csv(self):
        try:
            # Clear previous Output
            self.__clear_field()

            # Intercept and set stdout to our StringIO instance
            print_out = StringIO()
            sys.stdout = print_out

            start_time = time()
            ExportService().process()

            # restore stdout so we can really print and then set again
            sys.stdout = sys.__stdout__
            append_to_text_ln(self.TTextOutput, print_out.getvalue())

            # Print Time taken
            append_to_text_ln(self.TTextOutput, "--- Time Taken: %s seconds ---" % (time() - start_time))
            self.TLabelResult.configure(foreground="GREEN", text="SUCCESS")
        except ValueError as value_ex:
            show_alert("Validation Error", str(value_ex))
        except IOError as io_ex:
            self.TLabelResult.configure(foreground="RED", text="FAILURE")
            append_to_text_ln(self.TTextOutput, str(io_ex))
        except Exception as err:
            log.error("Unknown error occur. Error:{error}".format(error=err.__str__()),
                      exc_info=True)
            show_alert("Error", "Unknown Error. Check logs for more details.")

    def __clear_field(self):
        self.TTextOutput.delete("0.0", tk.END)
        self.TLabelResult.configure(text="")

    def __validate_fields(self):
        # Bank Name Validation
        if not BANK_NAMES.__contains__(self.combobox_bankname.get()):
            raise ValueError("Bank Name Not Selected")

        # Account Type Validation
        if not ACCOUNT_TYPE.__contains__(self.radioButton_account_type.get()):
            raise ValueError("Account Type Not Selected")

        # File Validation
        if not self.TEntryUploadPath.get():
            raise ValueError("File Not Selected")

        # Check File exists or not
        is_file_exists = os.path.exists(self.TEntryUploadPath.get())
        if not is_file_exists:
            raise ValueError("File not Found or unable to Read it.")
        return True
